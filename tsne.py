import numpy as np

from matplotlib import pyplot as plt
from matplotlib.collections import LineCollection

from sklearn import manifold
from sklearn.metrics import euclidean_distances
from sklearn.decomposition import PCA

instruments = [
    0,
    24,
    25,
    26,
    27,
    40,
    41,
    42,
    49,
    50,
    53,
    56,
    57,
    58,
    6,
    64,
    65,
    7,
    73,
    74,
]
M = np.array(
    [
        [
            0.97653,
            0.71706,
            0.63191,
            0.63322,
            0.54884,
            0.44546,
            0.25772,
            0.43655,
            0.02507,
            0.21993,
            0.74635,
            0.28189,
            0.42130,
            0.59397,
            0.68079,
            0.51574,
            0.77388,
            0.62636,
            0.50822,
            0.71882,
        ],
        [
            0.55709,
            0.98824,
            0.77431,
            0.68738,
            0.65730,
            0.23394,
            0.22207,
            0.31539,
            0.03325,
            0.11610,
            0.50935,
            0.16060,
            0.09527,
            0.14339,
            0.57864,
            0.30428,
            0.58652,
            0.61818,
            0.25363,
            0.42302,
        ],
        [
            0.68654,
            0.84961,
            0.96902,
            0.67037,
            0.61057,
            0.37459,
            0.21444,
            0.43639,
            0.05377,
            0.14805,
            0.62509,
            0.31634,
            0.34230,
            0.35378,
            0.63050,
            0.47948,
            0.65026,
            0.64936,
            0.33181,
            0.55552,
        ],
        [
            0.48273,
            0.76860,
            0.68619,
            0.98706,
            0.66407,
            0.37420,
            0.22426,
            0.44055,
            0.03642,
            0.07515,
            0.48744,
            0.36821,
            0.22997,
            0.23549,
            0.61095,
            0.47033,
            0.63268,
            0.61758,
            0.29736,
            0.53248,
        ],
        [
            0.05340,
            0.53532,
            0.43001,
            0.31490,
            0.98491,
            0.10498,
            0.21664,
            0.21418,
            0.00624,
            0.00468,
            0.34870,
            0.08806,
            0.00446,
            0.00515,
            0.47083,
            0.23644,
            0.35229,
            0.54101,
            0.08934,
            0.25801,
        ],
        [
            0.08683,
            0.11903,
            0.31163,
            0.19070,
            0.20235,
            0.96140,
            0.12585,
            0.21999,
            0.00643,
            0.02499,
            0.27968,
            0.25203,
            0.08450,
            0.09765,
            0.05432,
            0.13887,
            0.33293,
            0.23708,
            0.20032,
            0.32020,
        ],
        [
            0.11288,
            0.39708,
            0.25002,
            0.36418,
            0.34764,
            0.19326,
            0.93707,
            0.16099,
            0.00961,
            0.03573,
            0.29067,
            0.17889,
            0.02770,
            0.02321,
            0.35577,
            0.21403,
            0.21576,
            0.33945,
            0.04033,
            0.18937,
        ],
        [
            0.31045,
            0.40252,
            0.61177,
            0.55619,
            0.46488,
            0.38459,
            0.10633,
            0.95072,
            0.00753,
            0.12384,
            0.39162,
            0.29505,
            0.09455,
            0.24376,
            0.45909,
            0.47624,
            0.68906,
            0.63534,
            0.35795,
            0.52692,
        ],
        [
            0.00091,
            0.00118,
            0.00329,
            0.00086,
            0.00217,
            0.04799,
            0.01659,
            0.00994,
            0.71935,
            0.01053,
            0.00383,
            0.00789,
            0.02032,
            0.00773,
            0.00402,
            0.00897,
            0.00204,
            0.00087,
            0.00589,
            0.01480,
        ],
        [
            0.30308,
            0.44908,
            0.44060,
            0.36526,
            0.39655,
            0.47672,
            0.27228,
            0.45869,
            0.07032,
            0.92442,
            0.44195,
            0.42616,
            0.15129,
            0.24871,
            0.40794,
            0.58193,
            0.57396,
            0.53382,
            0.31960,
            0.55418,
        ],
        [
            0.48332,
            0.49423,
            0.41177,
            0.39049,
            0.32141,
            0.28854,
            0.16274,
            0.26689,
            0.00536,
            0.06293,
            0.98891,
            0.19034,
            0.40291,
            0.46166,
            0.34009,
            0.42096,
            0.46565,
            0.38056,
            0.40006,
            0.42700,
        ],
        [
            0.02467,
            0.01999,
            0.02342,
            0.08668,
            0.03454,
            0.34256,
            0.06078,
            0.13311,
            0.01476,
            0.01936,
            0.29082,
            0.96241,
            0.12434,
            0.05333,
            0.04016,
            0.23435,
            0.10746,
            0.17175,
            0.14465,
            0.11827,
        ],
        [
            0.31752,
            0.08034,
            0.06859,
            0.29524,
            0.08528,
            0.29161,
            0.12014,
            0.05104,
            0.03232,
            0.04618,
            0.52059,
            0.33742,
            0.96045,
            0.30181,
            0.16877,
            0.21512,
            0.36073,
            0.36257,
            0.25516,
            0.24003,
        ],
        [
            0.35863,
            0.24248,
            0.23273,
            0.28207,
            0.13934,
            0.45565,
            0.24271,
            0.37160,
            0.10165,
            0.26160,
            0.72738,
            0.34755,
            0.54020,
            0.96674,
            0.27784,
            0.53423,
            0.54764,
            0.32865,
            0.44845,
            0.46253,
        ],
        [
            0.02250,
            0.29725,
            0.15365,
            0.10901,
            0.35658,
            0.09156,
            0.19024,
            0.20990,
            0.00761,
            0.00268,
            0.32190,
            0.07222,
            0.00641,
            0.00001,
            0.97877,
            0.22750,
            0.42597,
            0.47984,
            0.09987,
            0.10657,
        ],
        [
            0.32133,
            0.42596,
            0.49870,
            0.42632,
            0.44190,
            0.39139,
            0.20883,
            0.42090,
            0.06883,
            0.30912,
            0.59286,
            0.46884,
            0.39465,
            0.54011,
            0.45389,
            0.96955,
            0.66851,
            0.52246,
            0.33134,
            0.62004,
        ],
        [
            0.66575,
            0.65618,
            0.64248,
            0.58036,
            0.55110,
            0.49730,
            0.30791,
            0.58978,
            0.03046,
            0.30728,
            0.64347,
            0.43496,
            0.42667,
            0.59089,
            0.68594,
            0.61090,
            0.98502,
            0.60244,
            0.43041,
            0.81838,
        ],
        [
            0.10639,
            0.68923,
            0.65542,
            0.51665,
            0.71055,
            0.30571,
            0.24550,
            0.41137,
            0.05447,
            0.15419,
            0.51988,
            0.37348,
            0.06770,
            0.04920,
            0.69043,
            0.47878,
            0.70673,
            0.98504,
            0.31795,
            0.51399,
        ],
        [
            0.35959,
            0.26140,
            0.33079,
            0.37863,
            0.30133,
            0.40439,
            0.12920,
            0.37058,
            0.05888,
            0.31660,
            0.70347,
            0.35967,
            0.30677,
            0.50893,
            0.26181,
            0.44745,
            0.42632,
            0.27329,
            0.96932,
            0.58846,
        ],
        [
            0.63691,
            0.53246,
            0.56318,
            0.57288,
            0.44996,
            0.51538,
            0.25785,
            0.46325,
            0.02110,
            0.36713,
            0.73109,
            0.39390,
            0.35045,
            0.58505,
            0.57193,
            0.54932,
            0.68937,
            0.44196,
            0.69194,
            0.98057,
        ],
    ]
)

instrument_map = {
    0: "Acoustic Grand Piano",
    65: "Alto Sax",
    25: "Acoustic Guitar (steel)",
    24: "Acoustic Guitar (nylon)",
    74: "Recorder",
    26: "Electric Guitar (jazz)",
    53: "Voice Ooh",
    42: "Cello",
    58: "Tuba",
    73: "Flute",
    7: "Clavi",
    6: "Harpsichord",
    56: "Trumpet",
    40: "Violin",
    64: "Soprano Sax",
    57: "Trombone",
    50: "Synth Strings 1",
    41: "Viola",
    27: "Electric Guitar (clean)",
    49: "String Ensemble 2",
}

# scale rows by diagonal (i.e. by base model performance on itself)
d = M.diagonal()
M = M / d[:, np.newaxis]

M = (M + M.transpose()) / 2  # similarity
# M = 2 * M * M.transpose() / (M + M.transpose())

# print(M.shape)

fig, ax = plt.subplots()
im = ax.imshow(M, interpolation='none', vmin=0, vmax=1)

# We want to show all ticks...
ax.set_xticks(np.arange(len(instruments)))
ax.set_yticks(np.arange(len(instruments)))
# ... and label them with the respective list entries
ax.set_xticklabels(list(instrument_map[i] for i in instruments))
ax.set_yticklabels(list(instrument_map[i] for i in instruments))

# ax.set_xlabel('Dataset')
# ax.set_ylabel('Model')

# Rotate the tick labels and set their alignment.
plt.setp(ax.get_xticklabels(), rotation=90, ha="right",
         rotation_mode="anchor")

plt.colorbar(im)
fig.tight_layout()

M = 1 - M  # to distance matrix

tsne = manifold.TSNE(
    n_components=2,
    perplexity=5,
    learning_rate=100,
    random_state=np.random.RandomState(seed=1),  # good
    # random_state=np.random.RandomState(seed=7), # good
    metric="precomputed",
)
pos = tsne.fit_transform(M)

fig = plt.figure(1)
ax = plt.axes()

s = 20
plt.scatter(pos[:, 0], pos[:, 1], color="black", s=s, lw=0, label="MDS")

for i, instr in enumerate(instruments):
    xshift = 0
    xshift = -0.02 if "Viola" in instrument_map[instr] else xshift
    xshift = -0.13 if "clean" in instrument_map[instr] else xshift
    ax.annotate(instrument_map[instr], (xshift + pos[i, 0], 0.01 + pos[i, 1]))

import tikzplotlib

tikzplotlib.save(
    "test.tex", axis_width="9cm", axis_height="9cm", textsize=10.0, dpi=2400
)

plt.show()
